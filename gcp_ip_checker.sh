#!/bin/bash

# Solicita o ID da organiza√ß√£o antes de iniciar o menu
read -p "üîπ Digite o ID da organiza√ß√£o do GCP: " ORG_ID

# Nome dos arquivos de sa√≠da
OUTPUT_FILE="output.csv"
COMPARE_OUTPUT="comparison_result.csv"
DETAILED_OUTPUT_CSV="output_detalhado.csv"
DETAILED_OUTPUT_TXT="output_detalhado.txt"
EPHEMERAL_OUTPUT="output_ephemeral.csv"

# Fun√ß√£o para coletar os IPs do GCP e salvar em CSV
function collect_gcp_ips {
    echo "üîç Coletando IPs do GCP para a organiza√ß√£o $ORG_ID..."
    gcloud asset search-all-resources \
      --scope=organizations/$ORG_ID \
      --asset-types='compute.googleapis.com/Address' \
      --read-mask='*' \
      --format=json | jq -r '.[] | select(.versionedResources) | .project as $p | .versionedResources[] | "\(.resource.address)"' > "$OUTPUT_FILE"

    if [[ -s $OUTPUT_FILE ]]; then
        echo "‚úÖ IPs do GCP coletados com sucesso! Salvo em $OUTPUT_FILE"
    else
        echo "‚ö†Ô∏è Nenhum IP foi encontrado ou erro na coleta!"
    fi
}

# Fun√ß√£o para comparar os IPs do GCP com um arquivo CSV fornecido pelo usu√°rio
function compare_ips {
    if [[ ! -f "$OUTPUT_FILE" ]]; then
        echo "‚ö†Ô∏è O arquivo $OUTPUT_FILE n√£o foi encontrado! Execute a op√ß√£o 1 primeiro."
        return
    fi

    read -p "üìÑ Digite o caminho do arquivo CSV com a lista de IPs para comparar: " CUSTOM_IP_FILE

    if [[ ! -f "$CUSTOM_IP_FILE" ]]; then
        echo "‚ùå O arquivo fornecido n√£o existe! Tente novamente."
        return
    fi

    echo "üîç Comparando IPs..."
    echo "IP_GCP,IP_FORNECIDO" > "$COMPARE_OUTPUT"

    while IFS=, read -r USER_IP; do
        MATCH=$(grep -Fx "$USER_IP" "$OUTPUT_FILE")

        if [[ -n "$MATCH" ]]; then
            echo "$MATCH,$USER_IP" >> "$COMPARE_OUTPUT"
        else
            echo "N√ÉO ENCONTRADO,$USER_IP" >> "$COMPARE_OUTPUT"
        fi
    done < "$CUSTOM_IP_FILE"

    echo "‚úÖ Compara√ß√£o conclu√≠da! Resultado salvo em $COMPARE_OUTPUT"
}

# Fun√ß√£o para coletar informa√ß√µes detalhadas do GCP e salvar em CSV
function collect_gcp_detailed {
    echo "üîç Coletando informa√ß√µes detalhadas dos IPs do GCP para a organiza√ß√£o $ORG_ID..."
    gcloud asset search-all-resources \
      --scope=organizations/$ORG_ID \
      --asset-types='compute.googleapis.com/Address' \
      --read-mask='*' \
      --format=json | jq -r '.[] | select(.versionedResources) | .project as $p | .versionedResources[] | "\($p),\(.resource.name),\(.resource.id),\(.resource.address),\(.resource.addressType)"' > "$DETAILED_OUTPUT_CSV"

    if [[ -s $DETAILED_OUTPUT_CSV ]]; then
        echo "‚úÖ Informa√ß√µes detalhadas coletadas com sucesso! Salvo em $DETAILED_OUTPUT_CSV"
    else
        echo "‚ö†Ô∏è Nenhuma informa√ß√£o detalhada foi encontrada ou erro na coleta!"
    fi
}

# Fun√ß√£o para coletar informa√ß√µes detalhadas e formatar com awk para TXT
function collect_gcp_detailed_txt {
    echo "üîç Coletando e formatando informa√ß√µes detalhadas dos IPs do GCP para a organiza√ß√£o $ORG_ID..."
    
    collect_gcp_detailed
    
    awk -F ',' '{print "Project: "$1"\nName: "$2"\nID: "$3"\nAddress: "$4"\nAddressType: "$5"\n---"}' "$DETAILED_OUTPUT_CSV" > "$DETAILED_OUTPUT_TXT"

    if [[ -s $DETAILED_OUTPUT_TXT ]]; then
        echo "‚úÖ Informa√ß√µes detalhadas salvas e formatadas com awk em $DETAILED_OUTPUT_TXT"
    else
        echo "‚ö†Ô∏è Ocorreu um erro ao gerar o arquivo TXT!"
    fi
}

# Fun√ß√£o para coletar apenas os IPs com a flag ephemeral (true ou false)
function collect_ephemeral_ips {
    echo "üîç Coletando informa√ß√µes sobre IPs ephemeral do GCP para a organiza√ß√£o $ORG_ID..."
    gcloud asset search-all-resources \
      --scope=organizations/$ORG_ID \
      --asset-types='compute.googleapis.com/Address' \
      --read-mask='*' \
      --format=json | jq -r '.[] | select(.versionedResources) | .project as $p | .versionedResources[] | "\($p),\(.resource.name),\(.resource.id),\(.resource.address),\(.resource.addressType),\(.resource.labels.ephemeral // "N/A")"' > "$EPHEMERAL_OUTPUT"

    if [[ -s $EPHEMERAL_OUTPUT ]]; then
        echo "‚úÖ Informa√ß√µes sobre IPs ephemeral coletadas com sucesso! Salvo em $EPHEMERAL_OUTPUT"
    else
        echo "‚ö†Ô∏è Nenhum IP ephemeral encontrado ou erro na coleta!"
    fi
}

# Menu interativo
while true; do
    echo "==============================="
    echo "üìå GCP IP Checker - Menu (Org: $ORG_ID)"
    echo "==============================="
    echo "1Ô∏è‚É£ - Coletar IPs do GCP (simples) e salvar em output.csv"
    echo "2Ô∏è‚É£ - Comparar IPs do GCP com um CSV fornecido"
    echo "3Ô∏è‚É£ - Coletar informa√ß√µes detalhadas do GCP e salvar em output_detalhado.csv"
    echo "4Ô∏è‚É£ - Coletar e formatar informa√ß√µes detalhadas em output_detalhado.txt"
    echo "5Ô∏è‚É£ - Coletar IPs marcados como ephemeral e salvar em output_ephemeral.csv"
    echo "6Ô∏è‚É£ - Sair"
    echo "==============================="
    read -p "üëâ Escolha uma op√ß√£o: " OPTION

    case $OPTION in
        1) collect_gcp_ips ;;
        2) compare_ips ;;
        3) collect_gcp_detailed ;;
        4) collect_gcp_detailed_txt ;;
        5) collect_ephemeral_ips ;;
        6) echo "üöÄ Saindo..."; exit ;;
        *) echo "‚ùå Op√ß√£o inv√°lida! Escolha entre 1 e 6." ;;
    esac
done

